
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TriageScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  nurseId: 'nurseId',
  isActive: 'isActive',
  urgencyLevel: 'urgencyLevel',
  initialObservations: 'initialObservations',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VitalSignsScalarFieldEnum = {
  id: 'id',
  triageId: 'triageId',
  temperature: 'temperature',
  bloodPressure: 'bloodPressure',
  heartRate: 'heartRate',
  respiratoryRate: 'respiratoryRate',
  oxygenSaturation: 'oxygenSaturation',
  additionalNotes: 'additionalNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Triage: 'Triage',
  VitalSigns: 'VitalSigns'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\miran\\Documents\\GitHub\\his\\apps\\triage\\prisma\\generated\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\miran\\Documents\\GitHub\\his\\apps\\triage\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../..",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "TRIAGE_DB_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated/client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"TRIAGE_DB_URL\")\n}\n\nmodel Triage {\n  id                  Int          @id @default(autoincrement())\n  patientId           Int\n  nurseId             Int\n  isActive            Boolean      @default(true)\n  urgencyLevel        Int          @db.SmallInt\n  initialObservations String\n  createdAt           DateTime     @default(now())\n  updatedAt           DateTime     @updatedAt\n  vitalSigns          VitalSigns[]\n\n  @@index([patientId])\n  @@index([nurseId])\n}\n\nmodel VitalSigns {\n  id               Int      @id @default(autoincrement())\n  triageId         Int\n  temperature      Float\n  bloodPressure    String\n  heartRate        Int\n  respiratoryRate  Int\n  oxygenSaturation Int\n  additionalNotes  String?\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n\n  triage Triage @relation(fields: [triageId], references: [id], onDelete: Cascade)\n\n  @@index([triageId])\n}\n",
  "inlineSchemaHash": "c2309c03ff6c2e8f0d7ad70d366f78cce35a4216f667d5e1523b14a98656770a",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Triage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"patientId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"nurseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"urgencyLevel\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"initialObservations\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"vitalSigns\",\"kind\":\"object\",\"type\":\"VitalSigns\",\"relationName\":\"TriageToVitalSigns\"}],\"dbName\":null},\"VitalSigns\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"triageId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"temperature\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"bloodPressure\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"heartRate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"respiratoryRate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"oxygenSaturation\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"additionalNotes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"triage\",\"kind\":\"object\",\"type\":\"Triage\",\"relationName\":\"TriageToVitalSigns\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    TRIAGE_DB_URL: typeof globalThis !== 'undefined' && globalThis['TRIAGE_DB_URL'] || typeof process !== 'undefined' && process.env && process.env.TRIAGE_DB_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

